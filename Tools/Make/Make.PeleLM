EBASE = PeleLM
PELE_PHYSICS_HOME ?= $(SUBMODS)/PelePhysics

include $(AMREX_HOME)/Tools/GNUMake/Make.defs 
#$(info LIBRARIES_BeginPeleMake="$(LIBRARIES)")

Bdirs += $(PELELM_HOME)/Source

ifeq ($(shell uname),Darwin)
  LDFLAGS += -headerpad_max_install_names
  all: $(executable)
	install_name_tool -add_rpath $(PELE_PHYSICS_HOME)/ThirdParty/INSTALL/$(configSpecificTPSuffix)/lib $(executable)
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS
else
  all: $(executable)
	$(SILENT) $(RM) AMReX_buildInfo.cpp
	@echo SUCCESS
endif

##############################################################
# PelePhysics
##############################################################
# Core
PP_SRC_HOME = $(PELE_PHYSICS_HOME)/Source
INCLUDE_LOCATIONS += $(PP_SRC_HOME)
VPATH_LOCATIONS   += $(PP_SRC_HOME)
Bpack             += $(PP_SRC_HOME)/Make.package
Blocs             += $(PP_SRC_HOME)

# Utilities
include $(PELE_PHYSICS_HOME)/Utility/Make.package

# EOS
EOS_HOME = $(PELE_PHYSICS_HOME)/Eos
ifeq ($(Eos_Model),$(filter $(Eos_Model),GammaLaw))
   DEFINES += -DUSE_GAMMALAW_EOS
endif
ifeq ($(Eos_Model),$(filter $(Eos_Model),Fuego))
   DEFINES += -DUSE_FUEGO_EOS
endif
ifeq ($(Eos_Model),$(filter $(Eos_Model),Soave-Redlich-Kwong))
   DEFINES += -DUSE_SRK_EOS
endif
INCLUDE_LOCATIONS += $(EOS_HOME)
VPATH_LOCATIONS   += $(EOS_HOME)
Bpack             += $(EOS_HOME)/Make.package
Blocs             += $(EOS_HOME)

# Reactions
REACTIONS_HOME = $(PELE_PHYSICS_HOME)/Reactions
ifeq ($(Reactor_dir), arkode)
    USE_SUNDIALS_PP = TRUE
    USE_ARKODE_PP = TRUE
    Bpack += $(REACTIONS_HOME)/$(Reactor_dir)/Make.package
    Blocs += $(REACTIONS_HOME)/$(Reactor_dir)
    Bpack += $(REACTIONS_HOME)/Make.package
    Blocs += $(REACTIONS_HOME)
endif
ifeq ($(Reactor_dir), cvode)
    USE_SUNDIALS_PP = TRUE
    USE_CVODE_PP = TRUE
    USE_KLU_PP ?= FALSE
    DEFINES += -DCOMPILE_JACOBIAN
    Bpack += $(REACTIONS_HOME)/$(Reactor_dir)/Make.package
    Blocs += $(REACTIONS_HOME)/$(Reactor_dir)
    Bpack += $(REACTIONS_HOME)/Make.package
    Blocs += $(REACTIONS_HOME)
endif
ifeq ($(Reactor_dir), null)
    Bpack += $(REACTIONS_HOME)/$(Reactor_dir)/Make.package
    Blocs += $(REACTIONS_HOME)/$(Reactor_dir)
endif

ifdef Chemistry_Model
  USE_FUEGO = TRUE
  CHEM_HOME = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models/$(Chemistry_Model)
  CHEM_ALL = $(PELE_PHYSICS_HOME)/Support/Fuego/Mechanism/Models
  Blocs += $(PELE_PHYSICS_HOME)/Support/Fuego/Evaluation
endif
VPATH_LOCATIONS += $(CHEM_HOME)
Bpack += $(CHEM_HOME)/Make.package $(CHEM_ALL)/Make.package
Blocs += $(CHEM_HOME) $(CHEM_ALL)
ifeq ($(USE_SUNDIALS_PP),TRUE)
  include $(PELE_PHYSICS_HOME)/ThirdParty/Make.ThirdParty
endif

# Transport
TRANSPORT_HOME = $(PELE_PHYSICS_HOME)/Transport/
include $(TRANSPORT_HOME)/Make.package
INCLUDE_LOCATIONS += $(TRANSPORT_HOME)
VPATH_LOCATIONS   += $(TRANSPORT_HOME)
ifeq ($(Transport_Model), Simple)
  DEFINES += -DUSE_SIMPLE_TRANSPORT
endif
ifeq ($(Transport_Model), EGLib)
  DEFINES += -DEGLIB_TRANSPORT
  USE_FUEGO = TRUE
endif
ifeq ($(Transport_Model), Constant)
  DEFINES += -DUSE_CONSTANT_TRANSPORT
endif
ifeq ($(Transport_Model), Sutherland)
  DEFINES += -DUSE_SUTHERLAND_TRANSPORT
endif

#
# Tells IAMR not to include the following: NS_error.cpp NS_setup.cpp NSBld.cpp
#                                          NavierStokes.cpp NavierStokes.H
#
SKIP_NS_SPECIFIC_CODE = TRUE

# IAMR
Bdirs += $(IAMR_HOME)/Source
Bdirs += $(IAMR_HOME)/Source/Utilities
Bdirs += $(IAMR_HOME)/Source/Src_$(DIM)d
Bdirs += $(AMREX_HYDRO_HOME)/Utils
Bdirs += $(AMREX_HYDRO_HOME)/Godunov
Bdirs += $(AMREX_HYDRO_HOME)/MOL
ifeq ($(USE_EB), TRUE)
   Bdirs += $(AMREX_HYDRO_HOME)/Redistribution
   Bdirs += $(AMREX_HYDRO_HOME)/EBGodunov
   Bdirs += $(AMREX_HYDRO_HOME)/EBMOL
endif

Bpack	+= $(foreach dir, $(Bdirs), $(dir)/Make.package)
Blocs	+= $(foreach dir, $(Bdirs), $(dir))

# AMReX 
Pdirs   += $(AMREX_HOME)/Src/Base
Pdirs   += $(AMREX_HOME)/Src/AmrCore
Pdirs   += $(AMREX_HOME)/Src/Amr
Pdirs   += $(AMREX_HOME)/Src/Boundary
ifeq ($(USE_PARTICLES), TRUE)
  Pdirs += $(AMREX_HOME)/Src/Particle
endif
Pdirs   += $(AMREX_HOME)/Src/LinearSolvers/MLMG
Pdirs   += $(AMREX_HOME)/Src/LinearSolvers/Projections

ifeq ($(USE_EB), TRUE)
  Pdirs   += $(AMREX_HOME)/Src/EB
endif

Bpack	+= $(foreach dir, $(Pdirs), $(dir)/Make.package)
Blocs	+= $(foreach dir, $(Pdirs), $(dir))

include $(Bpack) 
INCLUDE_LOCATIONS += $(Blocs)
VPATH_LOCATIONS   += $(Blocs)

#include $(AMREX_HOME)/Src/F_Interfaces/Base/Make.package
#INCLUDE_LOCATIONS += $(AMREX_HOME)/Src/F_Interfaces/Base
#VPATH_LOCATIONS   += $(AMREX_HOME)/Src/F_Interfaces/Base

ifeq ($(USE_FLCTS), TRUE)
  DEFINES += -DBL_DO_FLCT
  include $(IAMR_HOME)/Source/TurbInflow/Make.package
  VPATH_LOCATIONS += $(IAMR_HOME)/Source/TurbInflow
  EXTERN_CORE += $(IAMR_HOME)/Source/TurbInflow
endif

# runtime parameter support for extern/ routines
# Right now, only USE_FLCTS requires those
ifeq ($(USE_FLCTS), TRUE)
  f90EXE_sources += extern.f90

  EXTERN_TEMPLATE := $(PELE_PHYSICS_HOME)/Testing/Source/extern_probin.template

  EXTERN_PARAMETERS := $(shell $(AMREX_HOME)/Tools/F_scripts/findparams.py $(EXTERN_CORE))

  extern.f90: $(EXTERN_PARAMETERS) $(EXTERN_TEMPLATE)
  	$(AMREX_HOME)/Tools/F_scripts/write_probin.py \
             -t $(EXTERN_TEMPLATE) -o extern.f90 -n extern \
             --pa "$(EXTERN_PARAMETERS)" 
endif

# Hack in some LM-specific stuff

AMRVIS_HOME = $(AMREX_HOME)/Src/Extern/amrdata
include $(PELELM_HOME)/Tools/Make/AmrData.mk
INCLUDE_LOCATIONS += $(AMRVIS_HOME)
VPATH_LOCATIONS   += $(AMRVIS_HOME)
DEFINES += -DAMREX_NOLINEVALUES -DAMREX_PARALLEL_IO

ifeq ($(USE_VELOCITY), TRUE)
  DEFINES += -DAMREX_USE_VELOCITY
endif

ifeq ($(USE_NEWMECH), TRUE)
  DEFINES += -DAMREX_USE_NEWMECH
endif

# Enable time-dependent turbulence forcing term
ifeq ($(USE_TDEPFORCING), TRUE)
  ifeq ($(DIM), 3)
    DEFINES += -DGENGETFORCE
    DEFINES += -DDO_LMC_FORCE
  endif
endif

DEFINES += -DCG_USE_OLD_CONVERGENCE_CRITERIA

ifeq ($(USE_BGL),TRUE)
  MACHINE=BGL
  CXX=mpicxx.ibm
  FC=blrts_xlf
  fC=blrts_xlf
  CPPFLAGS+= -DMPICH_SKIP_MPICXX
  LDFLAGS+=-L/bgl/BlueLight/ppcfloor/bglsys/lib
  LDFLAGS+=-L/opt/ibmcmp/xlf/bg/10.1/blrts_lib
  BL_MPI_LIBS=-lxlf90 -lxlfmath
  FORTLINK:=LOWERCASE
endif
 
ifeq ($(USE_METIS),TRUE)
  Bdirs += metis-4.0/Lib
  DEFINES += -DBL_USE_METIS
endif

ifeq ($(REGRESSIONTEST),TRUE)
  DEFINES += -DREGRESSIONTEST
endif

# job_info support
CEXE_sources += AMReX_buildInfo.cpp
CEXE_headers += $(AMREX_HOME)/Tools/C_scripts/AMReX_buildInfo.H
INCLUDE_LOCATIONS +=  $(AMREX_HOME)/Tools/C_scripts

AMReX_buildInfo.cpp:
	$(AMREX_HOME)/Tools/C_scripts/makebuildinfo_C.py \
          --amrex_home "$(AMREX_HOME)" \
          --COMP "$(COMP)" --COMP_VERSION "$(COMP_VERSION)" \
          --FCOMP "$(FCOMP)" --FCOMP_VERSION "$(FCOMP_VERSION)" \
          --MODULES "Chemistry=$(Chemistry_Model)" \
          --GIT "$(PELELM_HOME) $(AMREX_HOME) $(IAMR_HOME) $(AMREX_HYDRO_HOME) $(PELE_PHYSICS_HOME)"

#$(info LIBRARIES_inPeleMake="$(LIBRARIES)")
include $(AMREX_HOME)/Tools/GNUMake/Make.rules

#$(info LIBRARIES_EndPeleMake="$(LIBRARIES)")
clean::
	$(SILENT) $(RM) extern_parameters.cpp extern_parameters_F.H extern_parameters.H extern.f90
	$(SILENT) $(RM) AMReX_buildInfo.cpp

ifeq ($(USE_SUNDIALS_PP),TRUE)
  TPL:
	cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_CUDA=$(USE_CUDA) USE_HIP=$(USE_HIP) USE_KLU=$(USE_KLU_PP) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP)

  TPLclean:
	cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_CUDA=$(USE_CUDA) USE_HIP=$(USE_HIP) USE_KLU=$(USE_KLU_PP) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP) clean

  TPLrealclean:
	cd $(PELE_PHYSICS_HOME)/ThirdParty; make AMREX_HOME=$(AMREX_HOME) USE_CUDA=$(USE_CUDA) USE_HIP=$(USE_HIP) USE_KLU=$(USE_KLU_PP) DEBUG=$(DEBUG) COMP=$(HOSTCC) NVCC=$(COMP) realclean
else
  TPL:
  TPLclean:
  TPLrealclean:
endif
